module Statements

imports

  Common
  Declarations
  Expressions
  Functions
  Objects

template options

  tokenize: "({;"
 
context-free priorities

  ReturnStatement.ValueReturn > ReturnStatement.EmptyReturn

context-free syntax

  Statement = VariableStatement
  Statement = ReturnStatement
  Statement = IfStatement
  Statement = BlockStatement
  Statement.Expression = <<ExpressionInStatement><SemiColon?>>
  
  ExpressionInStatement = PrimaryExpression
  ExpressionInStatement = FunctionDeclaration {reject}
  ExpressionInStatement = ObjectLiteral {reject}
  
  VariableStatement.Variable = <var <{VariableDeclaration ","}+><SemiColon?>>
  
  ReturnStatement.EmptyReturn = <return;>
  ReturnStatement.ValueReturn = <return <PrimaryExpression><SemiColon?>>
  
  IfStatement.IfElse = <
    if (<PrimaryExpression>) <Statement>
    else <Statement>
  >
  IfStatement.If = <if (<PrimaryExpression>) <Statement>>
  
  BlockStatement.Block = <{
    <StatementList>
  }>
  
  StatementList = <<{StatementListItem "\n"}*>>
  
  StatementListItem = Statement
  StatementListItem = Declaration
  