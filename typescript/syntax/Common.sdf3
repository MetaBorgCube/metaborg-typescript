module Common

lexical syntax

  ID             = [a-zA-Z] [a-zA-Z0-9]* 
  ID             = Keyword {reject}
  TypeID         = ID
  TypeID         = PredefinedType {reject}
  TypeID         = Keyword {reject}
  TypeID         = NullLiteral {reject}
  TypeID         = BooleanLiteral {reject}
  INT            = "-"? [0-9]+ 
  STRING         = "\"" StringChar* "\"" 
  StringChar     = ~[\"\n] 
  StringChar     = "\\\"" 
  StringChar     = BackSlashChar 
  BackSlashChar  = "\\" 
  LAYOUT         = [\ \t\n\r] 
  CommentChar    = [\*] 
  LAYOUT         = "/*" InsideComment* "*/" 
  InsideComment  = ~[\*] 
  InsideComment  = CommentChar 
  LAYOUT         = "//" ~[\n\r]* NewLineEOF 
  Comma          = ","
  SemiColon      = ";"
  QuestionMark   = "?"
  NewLineEOF     = [\n\r] 
  NewLineEOF     = EOF 
  EOF            =  

sorts Keyword
lexical syntax

  // Keyword
  Keyword = "break"
  Keyword = "do"
  Keyword = "in"
  Keyword = "typeof"
  Keyword = "case"
  Keyword = "else"
  Keyword = "instanceof"
  Keyword = "var"
  Keyword = "catch"
  Keyword = "export"
  Keyword = "new"
  Keyword = "void"
  Keyword = "class"
  Keyword = "extends"
  Keyword = "return"
  Keyword = "while"
  Keyword = "const"
  Keyword = "finally"
  Keyword = "super"
  Keyword = "with"
  Keyword = "continue"
  Keyword = "for"
  Keyword = "switch"
  Keyword = "yield"
  Keyword = "debugger"
  Keyword = "function"
  Keyword = "this"
  Keyword = "default"
  Keyword = "if"
  Keyword = "throw"
  Keyword = "delete"
  Keyword = "import"
  Keyword = "try"
  
  // BooleanLiteral
  Keyword = "true"
  Keyword = "false"
  
  // NullLiteral
  Keyword = "null"
  
  // FutureReservedWord
  Keyword = "enum"
  Keyword = "await"
  Keyword = "implements"
  Keyword = "package"
  Keyword = "protected"
  Keyword = "interface"
  Keyword = "private"
  Keyword = "public"
  
  PredefinedType = "any"
  PredefinedType = "boolean"
  PredefinedType = "number"
  PredefinedType = "string"
  PredefinedType = "symbol"
 
context-free syntax

  Literal = NullLiteral
  Literal = BooleanLiteral
  Literal = NumericLiteral
  Literal = StringLiteral
  
  NullLiteral.Null = "null"
  
  BooleanLiteral.True = "true"
  BooleanLiteral.False = "false"
  
  NumericLiteral.Number = INT
  StringLiteral.String = STRING
  
lexical restrictions

  // Ensure greedy matching for lexicals
  
  CommentChar     -/- [\/]
  INT             -/- [0-9]
  ID              -/- [a-zA-Z0-9\_]
  "true" "false"  -/- [a-zA-Z0-9\_]
  
  // EOF may not be followed by any char
  
  EOF             -/- ~[]
  
  // Backslash chars in strings may not be followed by " 
  
  BackSlashChar -/- [\"]

context-free restrictions

  // Ensure greedy matching for comments
  
  LAYOUT? -/- [\ \t\n\r]
  LAYOUT? -/- [\/].[\/]
  LAYOUT? -/- [\/].[\*]
