module Types

imports
  
  Common
  Names

context-free syntax

  PrimaryType = ObjectType
  
  ObjectType.Object = <{<TypeBody?>}>
  
  TypeBody = TypeMemberList
  TypeBody.TypeBodySemiColon = <<TypeMemberList><SemiColon>>
  TypeBody.TypeBodyComma = <<TypeMemberList><Comma>>
  
  TypeMemberList.TypeMemberListSingle = TypeMember
  TypeMemberList.TypeMemberListSemiColon = <<TypeMemberList><SemiColon><TypeMember>>
  TypeMemberList.TypeMemberListComma = <<TypeMemberList><Comma><TypeMember>>
  
  TypeMember = PropertySignature
  
  PropertySignature.TypeMember = <<LiteralPropertyName><QuestionMark?><TypeAnnotation?>>
  
  TypeAnnotation.TypeAnnotation = <: <Type>>
  
  TypeParameters.TypeParameters = <\<<{TypeParameter ","}+>\>>
 
  TypeParameter.TypeParameter = <<BindingIdentifier> <Constraint?>>

  Constraint.Constraint = <extends <Type>>

  Type.Any = <any>
  Type.NullType = <null>
  Type.UndefinedType = <undefined>
  Type.Void = <void>
  Type.Number = <number>
  Type.Boolean = <boolean>
  Type.String = <string>
  Type.Id = TypeID
  Type.Object = ObjectType
  Type.Union = <<Type> | <Type>> {left}
  